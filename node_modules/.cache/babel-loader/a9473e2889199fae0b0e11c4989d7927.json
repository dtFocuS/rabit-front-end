{"ast":null,"code":"var _jsxFileName = \"/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account';\nimport Open from '../components/Open'; // import * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getCurrentUser = userInfo => {\n      console.log(userInfo.user.id);\n      this.setState({\n        user_id: userInfo.user.id,\n        user: userInfo.user\n      }, () => {\n        console.log(this.state.user_id);\n      });\n    };\n\n    this.createTask = newTask => {\n      const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n      console.log(time);\n      const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n      fetch(\"http://localhost:3000/api/v1/tasks\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task: {\n            name: newTask.name,\n            description: newTask.description,\n            address: newTask.address,\n            city: newTask.city,\n            state: newTask.state,\n            zip_code: parseInt(newTask.zip_code),\n            prefer_cost: dollarAmount,\n            completed_by: time,\n            user_id: this.state.user.id\n          }\n        })\n      }).then(resp => resp.json()).then(task => {\n        console.log(task);\n        this.setState({\n          userTasks: this.state.user.tasks\n        }, () => {\n          this.getProfile();\n        });\n      });\n    };\n\n    this.logout = () => {\n      //this.clearToken();\n      this.setState({\n        user: null\n      });\n    };\n\n    this.loadOtherTasks = () => {\n      fetch('http://localhost:3000/api/v1/tasks').then(resp => resp.json()).then(tasks => this.filterOtherTasks(tasks));\n    };\n\n    this.filterOtherTasks = tasks => {\n      if (this.state.user) {\n        let temp = tasks.slice();\n        const filteredTasks = temp.filter(task => task.user_id !== this.state.user.id);\n        this.setState({\n          otherTasks: filteredTasks\n        });\n      }\n    };\n\n    this.getProfile = () => {\n      let token = this.getToken();\n      fetch('http://localhost:3000/api/v1/profile', {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(res => res.json()).then(json => {\n        console.log('profile:', json);\n        this.setState({\n          user: json.user\n        }, () => {\n          this.loadUserTasks();\n        });\n      });\n    };\n\n    this.loadUserTasks = () => {\n      if (this.state.user) {\n        let temp = this.state.user.tasks.slice().reverse();\n        this.setState({\n          userTasks: temp\n        }, () => {\n          this.loadOtherTasks();\n        });\n      }\n    };\n\n    this.handleCreate = newUser => {\n      let password = newUser.password;\n      fetch('http://localhost:3000/api/v1/users', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            name: newUser.name,\n            username: newUser.username,\n            password: newUser.password,\n            address: newUser.address,\n            city: newUser.city,\n            state: newUser.state,\n            zip_code: newUser.zip_code\n          }\n        })\n      }).then(resp => resp.json()).then(json => {\n        this.setState({\n          user: json.user\n        }, () => {\n          this.loginNewUser(password);\n        });\n      });\n    };\n\n    this.loginNewUser = password => {\n      let username = this.state.user.username;\n      console.log(username);\n      console.log(password);\n      fetch('http://localhost:3000/api/v1/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username,\n            password\n          }\n        })\n      }).then(res => res.json()).then(json => {\n        console.log('login:', json);\n\n        if (json && json.jwt) {\n          this.saveToken(json.jwt);\n          this.getProfile();\n        }\n      });\n    };\n\n    this.editTask = newTask => {\n      console.log(newTask);\n      const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n      console.log(time);\n      const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n      fetch(\"http://localhost:3000/api/v1/tasks/\" + newTask.task_id, {\n        method: \"PATCH\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task: {\n            name: newTask.name,\n            description: newTask.description,\n            address: newTask.address,\n            city: newTask.city,\n            state: newTask.state,\n            zip_code: parseInt(newTask.zip_code),\n            prefer_cost: dollarAmount,\n            completed_by: time,\n            user_id: this.state.user.id\n          }\n        })\n      }).then(resp => resp.json()).then(task => {\n        console.log(task);\n        this.getProfile();\n      });\n    };\n\n    this.placeBid = newBid => {\n      console.log(newBid);\n      const dollarAmount = parseFloat(newBid.amount).toFixed(2);\n      fetch(\"http://localhost:3000/api/v1/bids\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          bid: {\n            amount: dollarAmount,\n            eta: newTask.eta,\n            user_id: this.state.user.id,\n            task_id: newBid.task_id\n          }\n        })\n      }).then(resp => resp.json()).then(task => {\n        console.log(task);\n        this.setState({\n          userTasks: this.state.user.tasks\n        }, () => {\n          this.getProfile();\n        });\n      });\n    };\n\n    this.state = {\n      user: null,\n      user_id: null,\n      userTasks: [],\n      otherTasks: [],\n      bidTasks: [] //this.getProfile = this.getProfile.bind(this)\n\n    };\n  }\n\n  componentDidMount() {\n    this.getProfile(); //this.loadOtherTasks();\n  }\n\n  saveToken(jwt) {\n    localStorage.setItem('jwt', jwt);\n  }\n\n  getToken(jwt) {\n    return localStorage.getItem('jwt');\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Header, {\n      currentUser: this.state.user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routerProps => React.createElement(Home, Object.assign({}, routerProps, {\n        onCreateTask: this.createTask,\n        userTasks: this.state.userTasks,\n        onEditTask: this.editTask,\n        currentUser: this.state.user,\n        otherTasks: this.state.otherTasks,\n        placeBid: this.placeBid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: routerProps => React.createElement(Login, Object.assign({}, routerProps, {\n        onGetCurrentUser: this.getCurrentUser,\n        onGetProfile: this.getProfile,\n        onHandleCreate: this.handleCreate,\n        currentUser: this.state.user,\n        handleLogout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/account\",\n      render: routerProps => React.createElement(Account, Object.assign({}, routerProps, {\n        onCreateTask: this.createTask,\n        userTasks: this.state.userTasks,\n        onEditTask: this.editTask,\n        currentUser: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/open\",\n      render: routerProps => React.createElement(Open, Object.assign({}, routerProps, {\n        currentUser: this.state.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js"],"names":["React","Component","Header","Home","Login","Account","Open","BrowserRouter","Router","Route","App","constructor","getCurrentUser","userInfo","console","log","user","id","setState","user_id","state","createTask","newTask","time","hours","minutes","ampm","dollarAmount","parseFloat","prefer_cost","toFixed","fetch","method","headers","body","JSON","stringify","task","name","description","address","city","zip_code","parseInt","completed_by","then","resp","json","userTasks","tasks","getProfile","logout","loadOtherTasks","filterOtherTasks","temp","slice","filteredTasks","filter","otherTasks","token","getToken","res","loadUserTasks","reverse","handleCreate","newUser","password","username","loginNewUser","jwt","saveToken","editTask","task_id","placeBid","newBid","amount","bid","eta","bidTasks","componentDidMount","localStorage","setItem","getItem","render","routerProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Header from '../components/Header'\n\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account';\nimport Open from '../components/Open';\n\n// import * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            user_id: null,\n            userTasks: [],\n            otherTasks:[],\n            bidTasks: []\n        }\n        //this.getProfile = this.getProfile.bind(this)\n    }\n\n    getCurrentUser = (userInfo) => {\n        console.log(userInfo.user.id)\n        this.setState({\n            user_id: userInfo.user.id,\n            user: userInfo.user\n        }, () => {console.log(this.state.user_id)})\n    }\n\n    // componentWillMount() {\n    //     this.getProfile();\n    // }\n\n\n    createTask = (newTask) => {\n        const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n        console.log(time);\n        const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n        fetch(\"http://localhost:3000/api/v1/tasks\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ task: { name: newTask.name, description: newTask.description, address: newTask.address, city: newTask.city, state: newTask.state, zip_code: parseInt(newTask.zip_code), prefer_cost: dollarAmount, completed_by: time, user_id: this.state.user.id} })\n        })\n        .then(resp => resp.json())\n        .then(task => {\n            console.log(task)\n            this.setState({\n                userTasks: this.state.user.tasks\n            }, () => {this.getProfile()})\n        })\n    }\n\n    logout = () => {\n        //this.clearToken();\n        this.setState({\n            user: null\n        })\n    }\n\n    componentDidMount() {\n        this.getProfile()\n        //this.loadOtherTasks();\n    }\n\n    loadOtherTasks = () => {\n        fetch('http://localhost:3000/api/v1/tasks')\n        .then(resp => resp.json())\n        .then(tasks => this.filterOtherTasks(tasks))\n    }\n\n    filterOtherTasks = (tasks) => {\n        if (this.state.user) {\n            let temp = tasks.slice();\n            const filteredTasks = temp.filter(task => task.user_id !== this.state.user.id)\n            this.setState({\n                otherTasks: filteredTasks\n            })\n        }\n    }\n\n\n\n    getProfile = () => {\n        let token = this.getToken()\n        fetch('http://localhost:3000/api/v1/profile', {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('profile:', json)\n            this.setState({ user: json.user}, () => {this.loadUserTasks()})\n        })\n    }\n\n    saveToken(jwt) {\n        localStorage.setItem('jwt', jwt)\n    }\n\n    getToken(jwt) {\n        return localStorage.getItem('jwt')\n    }\n\n    loadUserTasks = () => {\n      if (this.state.user) {\n        let temp = this.state.user.tasks.slice().reverse();\n        this.setState({\n            userTasks: temp\n        }, () => {this.loadOtherTasks()})\n      }\n    }\n\n\n    handleCreate = (newUser) => {\n        let password = newUser.password;\n        fetch('http://localhost:3000/api/v1/users', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { name: newUser.name, username: newUser.username, password: newUser.password, address: newUser.address, city: newUser.city, state: newUser.state, zip_code: newUser.zip_code } })\n        })\n        .then(resp => resp.json())\n        .then(json => { this.setState({ user: json.user}, () => {this.loginNewUser(password)}) })\n\n    }\n\n    loginNewUser = (password) => {\n        let username = this.state.user.username;\n        console.log(username);\n        console.log(password);\n        fetch('http://localhost:3000/api/v1/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { username, password } })\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('login:', json)\n            if (json && json.jwt) {\n                this.saveToken(json.jwt)\n                this.getProfile()\n            }\n        })\n    }\n\n    editTask = (newTask) => {\n        console.log(newTask);\n        const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n        console.log(time);\n        const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n        fetch(\"http://localhost:3000/api/v1/tasks/\" + newTask.task_id, {\n            method: \"PATCH\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ task: { name: newTask.name, description: newTask.description, address: newTask.address, city: newTask.city, state: newTask.state, zip_code: parseInt(newTask.zip_code), prefer_cost: dollarAmount, completed_by: time, user_id: this.state.user.id } })\n        })\n        .then(resp => resp.json())\n        .then(task => {\n            console.log(task)\n            this.getProfile()\n        })\n\n    }\n\n    placeBid = (newBid) => {\n        console.log(newBid);\n        const dollarAmount = parseFloat(newBid.amount).toFixed(2);\n        fetch(\"http://localhost:3000/api/v1/bids\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ bid: { amount: dollarAmount, eta: newTask.eta, user_id: this.state.user.id, task_id: newBid.task_id } })\n        })\n        .then(resp => resp.json())\n        .then(task => {\n            console.log(task)\n            this.setState({\n                userTasks: this.state.user.tasks\n            }, () => { this.getProfile() })\n        })\n    }\n\n    render() {\n\n        return(\n            <Router>\n                <React.Fragment>\n\n                    <Header currentUser={this.state.user}/>\n                    <Route exact path=\"/\" render={routerProps => <Home {...routerProps} onCreateTask={this.createTask} userTasks={this.state.userTasks} onEditTask={this.editTask} currentUser={this.state.user} otherTasks={this.state.otherTasks} placeBid={this.placeBid}/>} />\n\n                    <Route exact path=\"/login\" render={routerProps => <Login {...routerProps} onGetCurrentUser={this.getCurrentUser} onGetProfile={this.getProfile} onHandleCreate={this.handleCreate} currentUser={this.state.user} handleLogout={this.logout}/>} />\n                    <Route exact path=\"/account\" render={routerProps => <Account {...routerProps} onCreateTask={this.createTask} userTasks={this.state.userTasks} onEditTask={this.editTask} currentUser={this.state.user}/>} />\n                    <Route exact path=\"/open\" render={routerProps => <Open {...routerProps} currentUser={this.state.user}/>} />\n                </React.Fragment>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}