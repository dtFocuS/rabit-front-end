{"ast":null,"code":"import _objectSpread from \"/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account'; // import * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getCurrentUser = userInfo => {\n      console.log(userInfo.user.id);\n      this.setState({\n        user_id: userInfo.user.id,\n        user: userInfo.user\n      }, () => {\n        console.log(this.state.user_id);\n      });\n    };\n\n    this.logout = () => {\n      //this.clearToken();\n      this.setState({\n        user: null\n      });\n    };\n\n    this.getProfile = () => {\n      let token = this.getToken();\n      fetch('http://localhost:3000/api/v1/profile', {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(res => res.json()).then(json => {\n        console.log('profile:', json);\n        this.setState({\n          user: json.user\n        }, () => {\n          console.log(this.state.user);\n        });\n      });\n    };\n\n    this.handleCreate = newUser => {\n      fetch('http://localhost:3000/api/v1/users', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: _objectSpread({}, newUser)\n        })\n      }).then(resp => resp.json()).then(json => {\n        this.setState({\n          user: json.user\n        }, () => {\n          this.loginNewUser();\n        });\n      });\n    };\n\n    this.loginNewUser = () => {\n      let username = this.state.user.username;\n      console.log(username);\n      let password = this.state.user.password;\n      console.log(password);\n      fetch('http://localhost:3000/api/v1/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username,\n            password\n          }\n        })\n      }).then(res => res.json()).then(json => {\n        console.log('login:', json);\n\n        if (json && json.jwt) {\n          this.saveToken(json.jwt);\n          this.GetProfile();\n        }\n      });\n    };\n\n    this.state = {\n      user: null,\n      user_id: null\n    };\n  }\n\n  componentWillMount() {\n    this.getProfile();\n  } // getUserToken = () => {\n  //     return localStorage.getItem('jwt');\n  // }\n  // state = {\n  //     user: null,\n  //     username: null\n  // }\n  // constructor() {\n  //     super()\n  //     this.username = React.createRef()\n  //     this.password = React.createRef()\n  //     if (this.getToken()) {\n  //         this.getProfile()\n  //     }\n  //     this.logout = this.logout.bind(this)\n  // }\n  // login = (event) => {\n  //     event.preventDefault()\n  //     console.log('log in')\n  //     let username = event.target[0].value\n  //     let password = event.target[1].value\n  //     fetch('http://localhost:3000/api/v1/login', {\n  //         method: 'POST',\n  //         headers: {\n  //             'Content-Type': 'application/json'\n  //         },\n  //         body: JSON.stringify({ user: { username, password } })\n  //     })\n  //         .then(res => res.json())\n  //         .then(json => {\n  //             console.log('login:', json)\n  //             if (json && json.jwt) {\n  //                 this.saveToken(json.jwt)\n  //                 this.getProfile()\n  //             }\n  //         })\n  //         .then(() => {\n  //             this.props.history.push('/')\n  //         })\n  // }\n\n\n  saveToken(jwt) {\n    localStorage.setItem('jwt', jwt);\n  } // clearToken(jwt) {\n  //     localStorage.setItem('jwt', '')\n  // }\n\n\n  getToken(jwt) {\n    return localStorage.getItem('jwt');\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routerProps => React.createElement(Home, Object.assign({}, routerProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: routerProps => React.createElement(Login, Object.assign({}, routerProps, {\n        onGetCurrentUser: this.getCurrentUser,\n        onGetProfile: this.getProfile,\n        onHandleCreate: this.handleCreate,\n        currentUser: this.state.user,\n        handleLogout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/account\",\n      component: Account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js"],"names":["React","Component","Header","Home","Login","Account","BrowserRouter","Router","Route","App","constructor","getCurrentUser","userInfo","console","log","user","id","setState","user_id","state","logout","getProfile","token","getToken","fetch","headers","then","res","json","handleCreate","newUser","method","body","JSON","stringify","resp","loginNewUser","username","password","jwt","saveToken","GetProfile","componentWillMount","localStorage","setItem","getItem","render","routerProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Header from '../components/Header'\n\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account';\n\n// import * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            user_id: null\n        }\n    }\n\n    getCurrentUser = (userInfo) => {\n        console.log(userInfo.user.id)\n        this.setState({\n            user_id: userInfo.user.id,\n            user: userInfo.user\n        }, () => {console.log(this.state.user_id)})\n    }\n\n    componentWillMount() {\n        this.getProfile();\n    }\n\n    // getUserToken = () => {\n    //     return localStorage.getItem('jwt');\n    // }\n\n    // state = {\n    //     user: null,\n    //     username: null\n    // }\n\n    // constructor() {\n    //     super()\n    //     this.username = React.createRef()\n    //     this.password = React.createRef()\n\n    //     if (this.getToken()) {\n    //         this.getProfile()\n    //     }\n\n    //     this.logout = this.logout.bind(this)\n    // }\n\n    // login = (event) => {\n    //     event.preventDefault()\n    //     console.log('log in')\n    //     let username = event.target[0].value\n    //     let password = event.target[1].value\n\n    //     fetch('http://localhost:3000/api/v1/login', {\n    //         method: 'POST',\n    //         headers: {\n    //             'Content-Type': 'application/json'\n    //         },\n    //         body: JSON.stringify({ user: { username, password } })\n    //     })\n    //         .then(res => res.json())\n    //         .then(json => {\n    //             console.log('login:', json)\n    //             if (json && json.jwt) {\n    //                 this.saveToken(json.jwt)\n    //                 this.getProfile()\n    //             }\n    //         })\n    //         .then(() => {\n    //             this.props.history.push('/')\n    //         })\n    // }\n\n    logout = () => {\n        //this.clearToken();\n        this.setState({ \n            user: null \n        })\n    }\n    \n\n    getProfile = () => {\n        let token = this.getToken()\n        fetch('http://localhost:3000/api/v1/profile', {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('profile:', json)\n            this.setState({ user: json.user }, () => {console.log(this.state.user)})\n        })\n    }\n\n    saveToken(jwt) {\n        localStorage.setItem('jwt', jwt)\n    }\n\n    // clearToken(jwt) {\n    //     localStorage.setItem('jwt', '')\n    // }\n\n    getToken(jwt) {\n        return localStorage.getItem('jwt')\n    }\n\n\n    handleCreate = (newUser) => {\n        fetch('http://localhost:3000/api/v1/users', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { ...newUser } })\n        })\n        .then(resp => resp.json())\n        .then(json => { this.setState({ user: json.user}, () => {this.loginNewUser()}) })\n\n    }\n\n    loginNewUser = () => {\n        let username = this.state.user.username;\n        console.log(username);\n        let password = this.state.user.password; \n        console.log(password);\n        fetch('http://localhost:3000/api/v1/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { username, password } })\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('login:', json)\n            if (json && json.jwt) {\n                this.saveToken(json.jwt)\n                this.GetProfile()\n            }\n        })\n    }\n\n    render() {\n\n        return(\n            <Router>\n                <React.Fragment>\n                    <Header />\n                    <Route exact path=\"/\" render={routerProps => <Home {...routerProps} />} />\n                    <Route exact path=\"/login\" render={routerProps => <Login {...routerProps} onGetCurrentUser={this.getCurrentUser} onGetProfile={this.getProfile} onHandleCreate={this.handleCreate} currentUser={this.state.user} handleLogout={this.logout}/>} />\n                    <Route exact path=\"/account\" component={Account} />\n                </React.Fragment>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}