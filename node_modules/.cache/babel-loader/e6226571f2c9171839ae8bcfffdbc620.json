{"ast":null,"code":"import _objectSpread from \"/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Header from '../components/Header';\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account'; // import * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getCurrentUser = userInfo => {\n      console.log(userInfo.user.id);\n      this.setState({\n        user_id: userInfo.user.id,\n        user: userInfo.user\n      }, () => {\n        console.log(this.state.user_id);\n      });\n    };\n\n    this.createTask = newTask => {\n      console.log(newTask);\n      const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n      console.log(time);\n      const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n      console.log(dollarAmount);\n      fetch(\"http://localhost:3000/api/v1/tasks\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task: {\n            name: newTask.name,\n            description: newTask.description,\n            address: newTask.address,\n            city: newTask.city,\n            state: newTask.state,\n            zip_code: newTask.zip_code,\n            prefer_cost: dollarAmount,\n            completed_by: time,\n            user_id: this.state.user.id\n          }\n        })\n      }).then(resp => resp.json()).then(json => console.log(json));\n    };\n\n    this.logout = () => {\n      //this.clearToken();\n      this.setState({\n        user: null\n      });\n    };\n\n    this.getProfile = () => {\n      let token = this.getToken();\n      fetch('http://localhost:3000/api/v1/profile', {\n        headers: {\n          'Authorization': 'Bearer ' + token\n        }\n      }).then(res => res.json()).then(json => {\n        console.log('profile:', json);\n        this.setState({\n          user: json.user\n        }, () => {\n          console.log(this.state.user);\n        });\n      });\n    };\n\n    this.handleCreate = newUser => {\n      let password = newUser.password;\n      fetch('http://localhost:3000/api/v1/users', {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: _objectSpread({}, newUser)\n        })\n      }).then(resp => resp.json()).then(json => {\n        this.setState({\n          user: json.user\n        }, () => {\n          this.loginNewUser(password);\n        });\n      });\n    };\n\n    this.loginNewUser = password => {\n      let username = this.state.user.username;\n      console.log(username);\n      console.log(password);\n      fetch('http://localhost:3000/api/v1/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: {\n            username,\n            password\n          }\n        })\n      }).then(res => res.json()).then(json => {\n        console.log('login:', json);\n\n        if (json && json.jwt) {\n          this.saveToken(json.jwt);\n          this.getProfile();\n        }\n      });\n    };\n\n    this.state = {\n      user: null,\n      user_id: null //this.getProfile = this.getProfile.bind(this)\n\n    };\n  }\n\n  componentWillMount() {\n    this.getProfile();\n  }\n\n  saveToken(jwt) {\n    localStorage.setItem('jwt', jwt);\n  } // clearToken(jwt) {\n  //     localStorage.setItem('jwt', '')\n  // }\n\n\n  getToken(jwt) {\n    return localStorage.getItem('jwt');\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: routerProps => React.createElement(Home, Object.assign({}, routerProps, {\n        onCreateTask: this.createTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      render: routerProps => React.createElement(Login, Object.assign({}, routerProps, {\n        onGetCurrentUser: this.getCurrentUser,\n        onGetProfile: this.getProfile,\n        onHandleCreate: this.handleCreate,\n        currentUser: this.state.user,\n        handleLogout: this.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/account\",\n      component: Account,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/dannytseng/Development/mod4/rabit-front-end/rabit-client/src/containers/App.js"],"names":["React","Component","Header","Home","Login","Account","BrowserRouter","Router","Route","App","constructor","getCurrentUser","userInfo","console","log","user","id","setState","user_id","state","createTask","newTask","time","hours","minutes","ampm","dollarAmount","parseFloat","prefer_cost","toFixed","fetch","method","headers","body","JSON","stringify","task","name","description","address","city","zip_code","completed_by","then","resp","json","logout","getProfile","token","getToken","res","handleCreate","newUser","password","loginNewUser","username","jwt","saveToken","componentWillMount","localStorage","setItem","getItem","render","routerProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Header from '../components/Header'\n\nimport Home from '../components/Home';\nimport Login from '../components/Login';\nimport Account from '../components/Account';\n\n// import * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            user_id: null\n        }\n        //this.getProfile = this.getProfile.bind(this)\n    }\n\n    getCurrentUser = (userInfo) => {\n        console.log(userInfo.user.id)\n        this.setState({\n            user_id: userInfo.user.id,\n            user: userInfo.user\n        }, () => {console.log(this.state.user_id)})\n    }\n\n    componentWillMount() {\n        this.getProfile();\n    }\n\n    createTask = (newTask) => {\n        console.log(newTask);\n        const time = newTask.hours + \":\" + newTask.minutes + \" \" + newTask.ampm;\n        console.log(time);\n        const dollarAmount = parseFloat(newTask.prefer_cost).toFixed(2);\n        console.log(dollarAmount)\n        fetch(\"http://localhost:3000/api/v1/tasks\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ task: { name: newTask.name, description: newTask.description, address: newTask.address, city: newTask.city, state: newTask.state, zip_code: newTask.zip_code, prefer_cost: dollarAmount, completed_by: time, user_id: this.state.user.id} })\n        })\n        .then(resp => resp.json())\n        .then(json => console.log(json))\n    }\n\n    logout = () => {\n        //this.clearToken();\n        this.setState({ \n            user: null \n        })\n    }\n    \n\n    getProfile = () => {\n        let token = this.getToken()\n        fetch('http://localhost:3000/api/v1/profile', {\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('profile:', json)\n            this.setState({ user: json.user }, () => {console.log(this.state.user)})\n        })\n    }\n\n    saveToken(jwt) {\n        localStorage.setItem('jwt', jwt)\n    }\n\n    // clearToken(jwt) {\n    //     localStorage.setItem('jwt', '')\n    // }\n\n    getToken(jwt) {\n        return localStorage.getItem('jwt')\n    }\n\n\n    handleCreate = (newUser) => {\n        let password = newUser.password;\n        fetch('http://localhost:3000/api/v1/users', {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { ...newUser } })\n        })\n        .then(resp => resp.json())\n        .then(json => { this.setState({ user: json.user}, () => {this.loginNewUser(password)}) })\n\n    }\n\n    loginNewUser = (password) => {\n        let username = this.state.user.username;\n        console.log(username); \n        console.log(password);\n        fetch('http://localhost:3000/api/v1/login', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ user: { username, password } })\n        })\n        .then(res => res.json())\n        .then(json => {\n            console.log('login:', json)\n            if (json && json.jwt) {\n                this.saveToken(json.jwt)\n                this.getProfile()\n            }\n        })\n    }\n\n    render() {\n\n        return(\n            <Router>\n                <React.Fragment>\n                    <Header />\n                    <Route exact path=\"/\" render={routerProps => <Home {...routerProps} onCreateTask={this.createTask}/>} />\n                    <Route exact path=\"/login\" render={routerProps => <Login {...routerProps} onGetCurrentUser={this.getCurrentUser} onGetProfile={this.getProfile} onHandleCreate={this.handleCreate} currentUser={this.state.user} handleLogout={this.logout}/>} />\n                    <Route exact path=\"/account\" component={Account} />\n                </React.Fragment>\n            </Router>\n\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}